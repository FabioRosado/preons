#!/usr/bin/env node

const program = require("commander");
const path = require("path");
const fs = require("fs");
const yaml = require("yaml");
const prettier = require("prettier");

const log = console.info;
const error = console.error;

program.option("-f, --force", "force installation").parse(process.argv);

const pkgs = program.args;

// console.log(pkgs, program, process.cwd());

const sassMaps = (set) => {
  return Object.entries(set.preons.rules)
    .map(([key, values]) => {
      return `$${key}: (
      ${Object.entries(values)
        .map(([key, value]) => `"${key}": ${value}`)
        .join(",\n")}
      );`;
    })
    .join("\n");
};

const baseline = (set) => {
  return `$baseline: ${set.preons.baseline};`;
};

const breakpoints = (set) => {
  return `$breakpoints: (
    ${Object.entries(set.preons.breakpoints)
      .map(([key, value]) => `"${key}": ${value}`)
      .join(",\n")}
  );`;
};

const preonize = (set) => {
  return fs.readFileSync(path.join(__dirname, "..", "scss", "_preonize.scss"));
};

const preons = (set) => {
  let properties = Object.entries(set.preons.properties);

  let mapping = properties.map(([property, rules]) => {
    if (!rules) {
      return "";
    }

    let mappedRules = Array.isArray(rules["rule"])
      ? rules["rule"].join(",")
      : rules["rule"];
    let mappedSass = rules["values"]
      ? `$${property}: ( ${Object.entries(rules["values"])
          .map(([key, value]) => `${key}:${value}`)
          .join(",")} );`
      : null;

    // console.log(mappedSass, "x");

    if (mappedSass) {
      return `
        ${mappedSass}
        @include preonize("${
          rules["class"] || ""
        }", ${property}, map-collection($${property}), $breakpoints);
      `;
    }

    return `@include preonize("${
      rules["class"] || ""
    }", ${property}, map-collection(${mappedRules}), $breakpoints);`;
  });

  return mapping.join("\n");
};

(async () => {
  try {
    let defaultFile = path.join(__dirname, "..", "..", "config", "preons.yaml");

    // @todo use any rules files
    // let file = options.src
    //   ? path.join(process.cwd(), ...options.src.split("/"))
    //   : defaultFile;

    let contents = fs.readFileSync(defaultFile, "utf8");
    let set = yaml.parse(contents);

    let formatted = prettier.format(
      `
        ${baseline(set)}

        ${sassMaps(set)}
        ${breakpoints(set)}
        ${preonize(set)}
        ${preons(set)}
      `,
      {
        semi: false,
        parser: "scss",
        printWidth: 120,
      }
    );

    log(formatted);
  } catch (e) {
    error(e);
  }
})();
